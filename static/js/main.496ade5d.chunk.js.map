{"version":3,"sources":["models/covid-positions-generator.ts","models/cell-data.ts","components/cell/index.tsx","components/global-style.tsx","components/Gameboard.tsx","components/Counter.tsx","components/Score.tsx","components/LevelSelector.tsx","constants.ts","components/App.tsx","index.tsx"],"names":["defaultCovidPositionsGenerator","rows","columns","covidCells","potentialCovidPositions","x","y","push","positions","temp","i","length","j","Math","floor","random","shuffle","slice","DEFAULT_TEXT_COLOR","COLORS","initializeCellsData","cellsData","rowsData","state","hasCovid","covidCellsAround","addCovid","position","increaseCovidCountAround","positionsAround","filter","isIndexValid","forEach","positionAround","contentToPresent","gameState","data","value","textColor","visible","toString","content","copy","cellsDataCopy","cellData","openCell","cellsOpenCount","openCellsAround","cellsCopy","cellsOpenCountCopy","reduce","previousOpenCellResult","useStyles","makeStyles","createStyles","common","height","width","borderStyle","backgroundColor","fontFamily","fontSize","hidden","borderWidth","borderColor","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","color","props","Cell","clickHandler","onClick","styles","Grid","item","xs","undefined","className","classNames","useGlobalStyle","sunken","raised","root","display","flexDirection","column","row","Gameboard","classes","globalClasses","map","counter","top","right","counterBackground","Counter","justifyContent","padding","button","buttonIcon","Score","pendingVaccineCells","seconds","onButton","LevelSelector","levels","onLevel","level","text","DEFAULT_LEVEL","LEVELS","MemoizedScore","React","memo","MemoizedGameboard","MemoizedLevelSelector","marginTop","alignItems","main","spacer","Spacer","App","useState","vaccineModeEnabled","setVaccineModeEnabled","setLevel","hiddenCells","setHiddenCells","setGameState","setCellsData","openCellsCount","setOpenCellsCount","setPendingVaccineCells","setSeconds","useInterval","resetGame","useCallback","generateCovidPositions","covidPositionsGenerator","createCellsData","cells","freeCells","startGame","updatedCellsData","vaccineCells","newState","vaccineCell","isCovidHandler","result","clickCell","updated","totalOpenCellsCount","handleKeyDown","event","key","toLowerCase","prev","useEffect","window","addEventListener","removeEventListener","Button","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.496ade5d.chunk.js","sourcesContent":["import { Position } from \"./position\";\n\nconst shuffle = (positions: Position[]) => {\n  let i = positions.length,\n    j = 0,\n    temp;\n\n  while (i--) {\n    j = Math.floor(Math.random() * (i + 1));\n\n    // swap randomly chosen element with current element\n    temp = positions[i];\n    positions[i] = positions[j];\n    positions[j] = temp;\n  }\n\n  return positions;\n};\n\nexport type CovidPositionsGenerator = (\n  rows: number,\n  columns: number,\n  covidCells: number\n) => Position[];\n\nconst defaultCovidPositionsGenerator: CovidPositionsGenerator = (\n  rows: number,\n  columns: number,\n  covidCells: number\n): Position[] => {\n  const potentialCovidPositions: Position[] = [];\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < columns; y++) {\n      potentialCovidPositions.push({ x, y });\n    }\n  }\n\n  return shuffle(potentialCovidPositions).slice(0, covidCells);\n};\n\nexport default defaultCovidPositionsGenerator;\n","import covidPositionsGenerator, {\n  CovidPositionsGenerator,\n} from \"./covid-positions-generator\";\nimport { GameStateEnum, Level } from \"./game\";\nimport { Position } from \"./position\";\n\nconst DEFAULT_TEXT_COLOR = \"black\";\nconst COLORS = [\n  DEFAULT_TEXT_COLOR,\n  \"#0000fd\",\n  \"#017e00\",\n  \"#fd0000\",\n  \"#010180\",\n  \"#830003\",\n  \"#008080\",\n  \"#000000\",\n  \"#808080\",\n] as const;\n\nexport const CellState = [\"vaccinated\", \"hidden\", \"visible\"] as const;\nexport type CellStateEnum = typeof CellState[number];\n\nexport type CellData = {\n  state: CellStateEnum;\n  hasCovid: boolean;\n  covidCellsAround: number;\n};\n\nexport type CellsData = CellData[][];\n\n// Helpers\n\nconst createCellData = (): CellData => ({\n  state: \"hidden\",\n  hasCovid: false,\n  covidCellsAround: 0,\n});\n\nconst initializeCellsData = (rows: number, columns: number): CellsData => {\n  const cellsData: CellsData = [];\n  for (let i = 0; i < rows; i++) {\n    const rowsData = [];\n    for (let j = 0; j < columns; j++) {\n      rowsData.push(createCellData());\n    }\n    cellsData.push(rowsData);\n  }\n\n  return cellsData;\n};\n\nconst addCovid = (cellsData: CellsData, position: Position) => {\n  const { x, y } = position;\n  cellsData[x][y].hasCovid = true;\n  increaseCovidCountAround(cellsData, position);\n};\n\nconst isIndexValid = (cellsData: CellsData, { x, y }: Position) =>\n  cellsData.length > x && x >= 0 && cellsData[x].length > y && y >= 0;\n\nconst positionsAround = (cellsData: CellsData, { x, y }: Position) =>\n  [\n    { x: x - 1, y: y - 1 },\n    { x: x - 1, y: y },\n    { x: x - 1, y: y + 1 },\n    { x: x, y: y - 1 },\n    { x: x, y: y + 1 },\n    { x: x + 1, y: y - 1 },\n    { x: x + 1, y: y },\n    { x: x + 1, y: y + 1 },\n  ].filter((position) => isIndexValid(cellsData, position));\n\nconst increaseCovidCountAround = (cellsData: CellsData, position: Position) => {\n  positionsAround(cellsData, position).forEach((positionAround) => {\n    cellsData[positionAround.x][positionAround.y].covidCellsAround++;\n  });\n};\n\nexport const createCellsData = (\n  { rows, columns, covidCells }: Level,\n  generateCovidPositions: CovidPositionsGenerator = covidPositionsGenerator\n): CellsData => {\n  const cellsData = initializeCellsData(rows, columns);\n  generateCovidPositions(rows, columns, covidCells).forEach((position) =>\n    addCovid(cellsData, position)\n  );\n  return cellsData;\n};\n\nexport const freeCells = ({ rows, columns, covidCells }: Level): number => {\n  const cells = rows * columns - covidCells;\n  return cells >= 0 ? cells : 0;\n};\n\nexport type Content = {\n  value: string;\n  textColor: string;\n  visible: boolean;\n};\n\nconst contentColor = (covidCellsAround: number) => COLORS[covidCellsAround];\n\nconst content = (data: CellData): Content => {\n  if (data.hasCovid)\n    return { value: \"🦠\", textColor: DEFAULT_TEXT_COLOR, visible: true };\n  else if (data.covidCellsAround === 0)\n    return { value: \" \", textColor: DEFAULT_TEXT_COLOR, visible: true };\n  else\n    return {\n      value: data.covidCellsAround.toString(),\n      textColor: contentColor(data.covidCellsAround),\n      visible: true,\n    };\n};\n\nexport const contentToPresent = (\n  gameState: GameStateEnum,\n  data: CellData\n): Content => {\n  if (gameState === \"game-over\" && data.hasCovid)\n    return { value: \"🦠\", textColor: DEFAULT_TEXT_COLOR, visible: true };\n\n  switch (data.state) {\n    case \"vaccinated\":\n      return { value: \"💉\", textColor: DEFAULT_TEXT_COLOR, visible: false };\n    case \"hidden\":\n      return { value: \" \", textColor: DEFAULT_TEXT_COLOR, visible: false };\n    case \"visible\":\n      return content(data);\n  }\n};\n\ntype OpenClickResult = {\n  cellsData: CellsData;\n  cellsOpenCount: number;\n};\n\nexport const copy = (cellsData: CellsData): CellsData => {\n  const cellsDataCopy: CellsData = [];\n  for (let i = 0; i < cellsData.length; i++) {\n    const rowsData: CellData[] = [];\n    for (let j = 0; j < cellsData[i].length; j++) {\n      const cellData = cellsData[i][j];\n      rowsData.push({\n        state: cellData.state,\n        hasCovid: cellData.hasCovid,\n        covidCellsAround: cellData.covidCellsAround,\n      });\n    }\n    cellsDataCopy.push(rowsData);\n  }\n\n  return cellsDataCopy;\n};\n\nconst openCell = (\n  cellsData: CellsData,\n  position: Position,\n  cellsOpenCount: number,\n  openCellsAround: boolean\n): OpenClickResult => {\n  const { x, y } = position;\n  if (\n    cellsData[x][y].state === \"vaccinated\" ||\n    cellsData[x][y].state === \"visible\"\n  )\n    return { cellsData, cellsOpenCount };\n  const cellsCopy = copy(cellsData);\n  cellsCopy[x][y].state = \"visible\";\n  const cellsOpenCountCopy = cellsOpenCount + 1;\n\n  if (cellsCopy[x][y].covidCellsAround > 0 || !openCellsAround) {\n    return { cellsData: cellsCopy, cellsOpenCount: cellsOpenCountCopy };\n  }\n\n  return positionsAround(cellsData, position).reduce(\n    (previousOpenCellResult, positionAround) =>\n      openCell(\n        previousOpenCellResult.cellsData,\n        positionAround,\n        previousOpenCellResult.cellsOpenCount,\n        true\n      ),\n    { cellsData: cellsCopy, cellsOpenCount: cellsOpenCountCopy }\n  );\n};\n\nexport const clickCell = (\n  cellsData: CellsData,\n  position: Position,\n  isCovidHandler: () => void\n): OpenClickResult => {\n  const { x, y } = position;\n  if (\n    cellsData[x][y].state === \"vaccinated\" ||\n    cellsData[x][y].state === \"visible\"\n  )\n    return { cellsData, cellsOpenCount: 0 };\n\n  if (cellsData[x][y].hasCovid) {\n    const result = openCell(cellsData, position, 0, false);\n    isCovidHandler();\n    return result;\n  } else {\n    return openCell(cellsData, position, 0, true);\n  }\n};\n\ntype VaccineResult = {\n  updatedCellsData: CellsData;\n  vaccineCells: number;\n};\n\nexport const vaccineCell = (\n  cellsData: CellsData,\n  position: Position,\n  pendingVaccineCells: number\n): VaccineResult => {\n  const { x, y } = position;\n  if (cellsData[x][y].state === \"visible\")\n    return { updatedCellsData: cellsData, vaccineCells: 0 };\n  if (cellsData[x][y].state === \"hidden\" && pendingVaccineCells === 0)\n    return { updatedCellsData: cellsData, vaccineCells: 0 };\n\n  const cellsCopy = copy(cellsData);\n  let newState: CellStateEnum;\n  let vaccineCells;\n  if (cellsCopy[x][y].state === \"vaccinated\") {\n    newState = \"hidden\";\n    vaccineCells = -1;\n  } else {\n    newState = \"vaccinated\";\n    vaccineCells = 1;\n  }\n  cellsCopy[x][y].state = newState;\n  return { updatedCellsData: cellsCopy, vaccineCells: vaccineCells };\n};\n","import { createStyles, Grid, makeStyles, Theme } from \"@material-ui/core\";\nimport React, { FC } from \"react\";\nimport { CellData, contentToPresent } from \"../../models/cell-data\";\nimport { GameStateEnum } from \"../../models/game\";\nimport classNames from \"classnames/bind\";\n\nconst useStyles = makeStyles<Theme, { textColor: string }, string>(() =>\n  createStyles({\n    common: {\n      height: 30,\n      width: 30,\n      borderStyle: \"solid\",\n      backgroundColor: \"lightgray\",\n      fontFamily: \"Lato-Black\",\n      fontSize: 16,\n    },\n    hidden: {\n      borderWidth: 2,\n      borderColor: \"white grey grey white\",\n    },\n    visible: {\n      borderLeftWidth: 1,\n      borderTopWidth: 1,\n      borderRightWidth: 0,\n      borderBottomWidth: 0,\n      borderColor: \"grey\",\n      color: (props) => props.textColor,\n    },\n  })\n);\n\nexport type CellProps = {\n  gameState: GameStateEnum;\n  data: CellData;\n  onClick: () => void;\n};\n\nconst Cell: FC<CellProps> = ({ gameState, data, onClick: clickHandler }) => {\n  const { value, textColor, visible } = contentToPresent(gameState, data);\n  const styles = useStyles({\n    textColor: textColor,\n  });\n\n  const getStyle = () =>\n    visible\n      ? classNames(styles.common, styles.visible)\n      : classNames(styles.common, styles.hidden);\n\n  return (\n    <Grid item xs={4}>\n      <button\n        onClick={\n          gameState === \"win\" || gameState === \"game-over\"\n            ? undefined\n            : clickHandler\n        }\n        className={getStyle()}\n      >\n        {value}\n      </button>\n    </Grid>\n  );\n};\n\nexport default Cell;\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nconst useGlobalStyle = makeStyles(() =>\n  createStyles({\n    sunken: {\n      borderStyle: \"solid\",\n      borderWidth: 2,\n      borderColor: \"grey white white grey\",\n      backgroundColor: \"lightgray\",\n    },\n    raised: {\n      borderStyle: \"solid\",\n      borderWidth: 2,\n      borderColor: \"white grey grey white\",\n      backgroundColor: \"lightgray\",\n    },\n  })\n);\n\nexport default useGlobalStyle;\n","import { createStyles, makeStyles } from \"@material-ui/core\";\nimport { FC } from \"react\";\nimport Cell from \"./cell\";\nimport { CellsData } from \"../models/cell-data\";\nimport { GameStateEnum } from \"../models/game\";\nimport { Position } from \"../models/position\";\nimport useGlobalStyle from \"./global-style\";\nimport classNames from \"classnames/bind\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    column: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    row: {\n      display: \"flex\",\n      flexDirection: \"row\",\n    },\n  })\n);\n\ntype GameboardProps = {\n  cellsData: CellsData;\n  gameState: GameStateEnum;\n  onClick: (position: Position) => void;\n};\n\nconst Gameboard: FC<GameboardProps> = ({ cellsData, gameState, onClick }) => {\n  const classes = useStyles();\n  const globalClasses = useGlobalStyle();\n\n  return (\n    <div className={classNames(globalClasses.sunken, classes.root)}>\n      {cellsData.map((row, x) => (\n        <div key={`${x}`} className={classes.row}>\n          {row.map((cellData, y) => (\n            <div key={`${x}-${y}`} className={classes.column}>\n              <Cell\n                gameState={gameState}\n                data={cellData}\n                onClick={() => onClick({ x: x, y: y })}\n              />\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Gameboard;\n","import { createStyles, makeStyles } from \"@material-ui/core\";\nimport React, { FC } from \"react\";\nimport useGlobalStyle from \"./global-style\";\nimport classNames from \"classnames/bind\";\n\nconst MAX_COUNTER = 999;\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      fontFamily: \"DSEG7ClassicRegular\",\n      fontSize: 30,\n      backgroundColor: \"black\",\n      position: \"relative\",\n    },\n    counter: {\n      color: \"red\",\n      position: \"absolute\",\n      top: 0,\n      right: 0,\n    },\n    counterBackground: {\n      color: \"darkred\",\n    },\n  })\n);\n\ntype CounterProps = {\n  value: number;\n};\n\nconst Counter: FC<CounterProps> = ({ value }) => {\n  const classes = useStyles();\n  const globalClasses = useGlobalStyle();\n\n  return (\n    <div className={classNames(globalClasses.sunken, classes.root)}>\n      <div className={classes.counterBackground}>{MAX_COUNTER}</div>\n      <div className={classes.counter}>{value}</div>\n    </div>\n  );\n};\n\nexport default Counter;\n","import { createStyles, makeStyles } from \"@material-ui/core\";\nimport React, { FC } from \"react\";\nimport { GameStateEnum } from \"../models/game\";\nimport Counter from \"./Counter\";\nimport useGlobalStyle from \"./global-style\";\nimport classNames from \"classnames/bind\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      padding: 2,\n    },\n    button: {\n      fontSize: 20,\n    },\n  })\n);\n\nconst buttonIcon = (gameState: GameStateEnum) => {\n  switch (gameState) {\n    case \"idle\":\n    case \"playing\":\n      return \"😷\";\n    case \"game-over\":\n      return \"🤒\";\n    case \"win\":\n      return \"😎\";\n  }\n};\n\ntype ScoreProps = {\n  pendingVaccineCells: number;\n  seconds: number;\n  gameState: GameStateEnum;\n  onButton: () => void;\n};\n\nconst Score: FC<ScoreProps> = ({\n  pendingVaccineCells,\n  seconds,\n  gameState,\n  onButton,\n}) => {\n  const classes = useStyles();\n  const globalClasses = useGlobalStyle();\n\n  return (\n    <div className={classNames(globalClasses.sunken, classes.root)}>\n      <Counter value={pendingVaccineCells} />\n      <button\n        className={classNames(globalClasses.raised, classes.button)}\n        onClick={onButton}\n      >\n        {buttonIcon(gameState)}\n      </button>\n      <Counter value={seconds} />\n    </div>\n  );\n};\n\nexport default Score;\n","import { createStyles, makeStyles } from \"@material-ui/core\";\nimport React, { FC } from \"react\";\nimport { Level } from \"../models/game\";\nimport useGlobalStyle from \"./global-style\";\nimport classNames from \"classnames/bind\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    button: {\n      padding: 4,\n    },\n  })\n);\n\ntype LevelSelectorProps = {\n  levels: Level[];\n  onLevel: (level: Level) => void;\n};\n\nconst LevelSelector: FC<LevelSelectorProps> = ({ levels, onLevel }) => {\n  const classes = useStyles();\n  const globalClasses = useGlobalStyle();\n\n  return (\n    <div className={classNames(globalClasses.sunken, classes.root)}>\n      {levels.map((level, i) => (\n        <button\n          className={classNames(globalClasses.raised, classes.button)}\n          key={i}\n          onClick={() => onLevel(level)}\n        >\n          {level.text}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default LevelSelector;\n","import { Level } from \"./models/game\";\n\nexport const DEFAULT_LEVEL = {\n  text: \"Beginner\",\n  columns: 9,\n  rows: 9,\n  covidCells: 10,\n};\n\nexport const LEVELS: Level[] = [\n  DEFAULT_LEVEL,\n  {\n    text: \"Intermediate\",\n    columns: 16,\n    rows: 16,\n    covidCells: 40,\n  },\n  {\n    text: \"Expert\",\n    columns: 30,\n    rows: 16,\n    covidCells: 99,\n  },\n];\n","import React, { FC } from \"react\";\nimport { useInterval } from \"react-timers-hooks\";\nimport Gameboard from \"./Gameboard\";\nimport {\n  CellsData,\n  createCellsData,\n  clickCell,\n  freeCells,\n  vaccineCell,\n} from \"../models/cell-data\";\nimport { GameStateEnum, Level } from \"../models/game\";\nimport { Position } from \"../models/position\";\nimport Score from \"./Score\";\nimport LevelSelector from \"./LevelSelector\";\nimport { DEFAULT_LEVEL, LEVELS } from \"../constants\";\nimport { Button, createStyles, makeStyles } from \"@material-ui/core\";\nimport useGlobalStyle from \"./global-style\";\nimport classNames from \"classnames/bind\";\n\nconst MemoizedScore = React.memo(Score);\nconst MemoizedGameboard = React.memo(Gameboard);\nconst MemoizedLevelSelector = React.memo(LevelSelector);\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      marginTop: 20,\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n    },\n    main: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"stretch\",\n      padding: 8,\n    },\n    spacer: {\n      height: 10,\n    },\n  })\n);\n\nconst Spacer: FC = () => {\n  const classes = useStyles();\n  return <div className={classes.spacer}> </div>;\n};\n\nconst App: FC = () => {\n  const [vaccineModeEnabled, setVaccineModeEnabled] = React.useState<boolean>(\n    false\n  );\n  const [level, setLevel] = React.useState<Level>(DEFAULT_LEVEL);\n  const [hiddenCells, setHiddenCells] = React.useState<number>(0);\n  const [gameState, setGameState] = React.useState<GameStateEnum>(\"idle\");\n  const [cellsData, setCellsData] = React.useState<CellsData>([]);\n  const [openCellsCount, setOpenCellsCount] = React.useState<number>(0);\n  const [pendingVaccineCells, setPendingVaccineCells] = React.useState<number>(\n    0\n  );\n  const [seconds, setSeconds] = React.useState<number>(0);\n\n  useInterval(\n    () => {\n      setSeconds(seconds + 1);\n    },\n    gameState === \"playing\" ? 1000 : null\n  );\n\n  const resetGame = React.useCallback(\n    (level: Level) => {\n      setVaccineModeEnabled(false);\n      setLevel(level);\n      setGameState(\"idle\");\n      setCellsData(createCellsData(level));\n      setHiddenCells(freeCells(level));\n      setSeconds(0);\n      setOpenCellsCount(0);\n      setPendingVaccineCells(level.covidCells);\n    },\n    [\n      setVaccineModeEnabled,\n      setLevel,\n      setGameState,\n      setCellsData,\n      setSeconds,\n      setOpenCellsCount,\n      setHiddenCells,\n      setPendingVaccineCells,\n    ]\n  );\n\n  const startGame = React.useCallback(() => {\n    setGameState(\"playing\");\n  }, [setGameState]);\n\n  const onClick = React.useCallback(\n    (position: Position) => {\n      if (gameState === \"idle\") startGame();\n      if (vaccineModeEnabled) {\n        const { vaccineCells, updatedCellsData } = vaccineCell(\n          cellsData,\n          position,\n          pendingVaccineCells\n        );\n        setCellsData(updatedCellsData);\n        setPendingVaccineCells(pendingVaccineCells - vaccineCells);\n      } else {\n        const isCovidHandler = () => setGameState(\"game-over\");\n        const { cellsData: updated, cellsOpenCount } = clickCell(\n          cellsData,\n          position,\n          isCovidHandler\n        );\n        setCellsData(updated);\n\n        const totalOpenCellsCount = openCellsCount + cellsOpenCount;\n        setOpenCellsCount(totalOpenCellsCount);\n\n        if (totalOpenCellsCount === hiddenCells) setGameState(\"win\");\n      }\n    },\n    [\n      startGame,\n      setCellsData,\n      setGameState,\n      setOpenCellsCount,\n      vaccineModeEnabled,\n      openCellsCount,\n      cellsData,\n      gameState,\n      hiddenCells,\n      pendingVaccineCells,\n    ]\n  );\n\n  const onLevel = React.useCallback(\n    (level: Level) => {\n      resetGame(level);\n    },\n    [resetGame]\n  );\n\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (event.key.toLowerCase() === \"f\") setVaccineModeEnabled((prev) => !prev);\n  };\n\n  React.useEffect(() => {\n    resetGame(DEFAULT_LEVEL);\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [resetGame]);\n  const classes = useStyles();\n  const globalClasses = useGlobalStyle();\n\n  return (\n    <div className={classes.root}>\n      <div className={classNames(globalClasses.raised, classes.main)}>\n        <MemoizedScore\n          pendingVaccineCells={pendingVaccineCells}\n          seconds={seconds}\n          gameState={gameState}\n          onButton={() => resetGame(level)}\n        />\n        <Spacer />\n        <MemoizedGameboard\n          cellsData={cellsData}\n          gameState={gameState}\n          onClick={onClick}\n        />\n        <Spacer />\n        <MemoizedLevelSelector levels={LEVELS} onLevel={onLevel} />\n        <Button onClick={() => setVaccineModeEnabled(!vaccineModeEnabled)}>\n          {vaccineModeEnabled ? \"Vaccine enabled\" : \"Vaccine disabled\"}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}